.template 0

function global.protocol__add_content(hook, ctx_name)
  # debug('add_content')
  for projectnode.content as c where c.hook = my.hook & (!defined(c.context) | (defined(c.context) & c.context = my.ctx_name))
.   template 1
$(c.:)
.   endtemplate
  endfor
endfunction

function load_post_nodes(projecttree, ctx_logname)
  my.ctx_logname ?= ""
  if my.ctx_logname <> ""
    my.ctx_logname_content = "][" + my.ctx_logname
  else
    my.ctx_logname_content = my.ctx_logname
  endif

  for my.projecttree. as projectnode
    if class(projectnode) = "XML value"
      next
    endif

    my.openfiles = XML.new()

    for projectnode.protocol_node as pn
      debug('post load node', "begin][" + pn.resource_display + my.ctx_logname_content + "][" + pn.name + ":" + item(projectnode))
      
      for pn.protocol_load as pl where pl.hook = 'post'
        directory.setcwd(get_protocol_resource_path(pn))
        if !file.exists(pl.src)
          error('The filename $(pl.src:) does not exist.')
        endif
        if defined(pn.dst)
          my.dst = string__convert_variables(pn.dst, projectnode)
          new my.openfiles.item as i
            define i.cached = cache__open(my.dst)
            if defined(pn.binary)
              define i.binary = pn.binary
            endif
          endnew
        endif
        protocol__add_content('begin', pn.resource_name)
        gsl from pl.src
        directory.setcwd(global.forgeit_path)
      endfor      
    endfor
    
    load_post_nodes(projectnode, my.ctx_logname + name(projectnode) + '/')

    for projectnode.protocol_node as pn
      debug('post load node', "end][" + pn.resource_display + my.ctx_logname_content + "][" + pn.name + ":" + item(projectnode))

      for pn.protocol_load as pl where pl.hook = 'post_end'
        directory.setcwd(get_protocol_resource_path(pn))
        if !file.exists(pl.src)
          error('The filename $(pl.src:) does not exist.')
        endif
        gsl from pl.src
        directory.setcwd(global.forgeit_path)
      endfor
      
      protocol__add_content('end', pn.resource_name)
    endfor

    for my.openfiles.item as i
      cache__close(i.cached)
      if defined(i.binary) & i.binary = "True"
        chmod('+x', global.build_path + i.cached)
      endif
    endfor
  endfor
endfunction

function global.protocol__load_post(projecttree, ctx_logname)
  my.ctx_logname ?= ""
  my.projecttree ?= root
  load_post_nodes(my.projecttree, my.ctx_logname)
endfunction

.endtemplate