.template 0
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# Authors:
# Caner Candan <caner@candan.fr>, http://caner.candan.fr
#

function copy_hook(name, global_ctx)
  if defined(n.virtual) & defined(projectnode.$(my.name))
    new pn.protocol_load as l
      define l.hook = my.name
      define l.src = projectnode.$(my.name)
    endnew
  elsif defined(n.$(my.name))
    new pn.protocol_load as l
      define l.hook = my.name
      define l.src = n.$(my.name)
    endnew
  endif
endfunction

function copy_attributes
  for n.attribute as a
    new pn.protocol_attribute as pa
      pa.name = a.name
      if defined(a.required)
        pa.required = a.required
      endif
      if defined(a.type)
        pa.required = a.type
      endif
    endnew
  endfor
endfunction

function copy_node_attribute(name)
  if defined(n.$(my.name))
    define pn.$(my.name) = n.$(my.name)
  endif
endfunction

function copy_node(global_ctx)
  new projectnode.protocol_node as pn
    add_context(pn, my.global_ctx)
    define pn.name = n.name
    copy_node_attribute('number')
    copy_node_attribute('dst')
    copy_node_attribute('binary')
    copy_node_attribute('debug')
    copy_attributes()
    copy_hook('pre_check', my.global_ctx)
    copy_hook('pre', my.global_ctx)
    copy_hook('post', my.global_ctx)
    copy_hook('post_end', my.global_ctx)
  endnew
endfunction

function check_count(projecttree, ctx_logname)
  my.ctx_logname ?= n.name
  my.cnt = count(my.projecttree., n.name=name())

  if !defined(n.number) & my.cnt > 1
    error('there is more than 1 node "$(n.name)" defined ($(my.cnt))', my.ctx_logname)
  elsif defined(n.number) & n.number <> "*" & n.number <> my.cnt
    error('there isnt the equal number of nodes "$(n.name)" defined ($(n.number) <> $(my.cnt))', my.ctx_logname)
  endif
endfunction

function combine_nodes(ctx, global_ctx, projecttree, ctx_logname)
  my.ctx_logname ?= ""

  for my.ctx.group as g
    combine_nodes(g, my.global_ctx, my.projecttree, my.ctx_logname + n.name + "][")  
  endfor
  
  for my.ctx.node as n
    for my.projecttree. as projectnode where defined(n.name) & n.name=name()
      check_count(my.projecttree)
      debug('node "$(n.name:)"', "combine][$(name(my.global_ctx):)][$(my.ctx_logname:)")
      copy_node(my.global_ctx)
      combine_nodes(n, my.global_ctx, projectnode, my.ctx_logname + n.name + "][")
    endfor
  endfor
endfunction

function global.protocol__combine(ctx, projecttree, ctx_logname)
  my.ctx_logname ?= ""
  my.projecttree ?= root
  combine_nodes(my.ctx, my.ctx, my.projecttree, my.ctx_logname)
endfunction

.endtemplate