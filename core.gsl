.template 0

function is_number(x)
  return conv.number(my.x) ?? 1 ? 0
endfunction

function check_type(ctx, projecttree, ctx_logname)
  my.ctx_logname ?= my.ctx.name
  
  if !defined(my.ctx.type) | !defined(my.projecttree.$(my.ctx.name))
    return
  endif
  my.attr = my.projecttree.$(my.ctx.name)
  if (my.ctx.type = "integer" | my.ctx.type = "float") & !is_number(my.attr)
    error('attribute "$(my.ctx.name)" is integer but the value isnt.', my.ctx_logname)
  elsif my.ctx.type = "boolean" & my.attr <> "True" & my.attr <> "False"
    error('attribute "$(my.ctx.name)" is boolean but the value is neither True or False.', my.ctx_logname)
  endif
endfunction

function check_require(ctx, projecttree, ctx_logname)
  my.ctx_logname ?= my.ctx.name

  if !defined(my.ctx.required) | my.ctx.required <> "True"
    return
  endif
  if !defined(my.projecttree.$(my.ctx.name))
    error('attribute "$(my.ctx.name)" is missing', my.ctx_logname)
  endif
endfunction

function check_attributes(ctx, projecttree, ctx_logname)
  my.ctx_logname ?= my.ctx.name
  
  for my.ctx.attribute as a
    check_require(a, my.projecttree, my.ctx_logname)
    check_type(a, my.projecttree, my.ctx_logname)
    debug('check attribute "$(a.name:)"', my.ctx_logname)
  endfor
endfunction

function check_count(ctx, projecttree, ctx_logname)
  my.ctx_logname ?= my.ctx.name
  my.cnt = count(my.projecttree., my.ctx.name=name())
  
  if !defined(my.ctx.number) & my.cnt > 1
    error('there is more than 1 node "$(my.ctx.name)" defined ($(my.cnt))', my.ctx_logname)
  elsif defined(my.ctx.number) & my.ctx.number <> "*" & my.ctx.number <> my.cnt
    error('there isnt the equal number of nodes "$(my.ctx.name)" defined ($(my.ctx.number) <> $(my.cnt))', my.ctx_logname)
  endif
endfunction

function check_nodes(ctx, projecttree, ctx_logname)
  my.ctx_logname ?= ""
  
  for my.ctx.node as n
    for my.projecttree. as projectnode where n.name=name()
      check_count(n, my.projecttree)
      debug('check node "$(n.name:)"', my.ctx_logname)
      check_attributes(n, projectnode, my.ctx_logname + n.name)
      check_nodes(n, projectnode, my.ctx_logname + n.name + "][")
    endfor
  endfor
endfunction

function global.protocol__check(ctx, projecttree, ctx_logname)
  my.ctx_logname ?= ""
  my.projecttree ?= root

  check_nodes(my.ctx, my.projecttree, my.ctx_logname)
endfunction

function compose_dst_name(node, projectnode)
  my.dst = ''
  for my.node.compose_dst as d
    if defined(d.attribute)
      my.dst += my.projectnode.$(d.attribute)
    elsif defined(d.value)
      my.dst += d.value
    endif
  endfor
  return my.dst
endfunction

function global.protocol__add_content(hook)
  for projectnode.content as c where c.hook = my.hook
    echo c.string()
.   template 1
$(c.:)
.   endtemplate
  endfor
endfunction

function pre_open(node, projectnode)
  gsl from my.node.pre
endfunction

function post_open(node, projectnode)
  my.cached = 0
  if defined(my.node->compose_dst)
    my.dst = compose_dst_name(my.node, my.projectnode)
    my.cached = cache__open(my.dst)
  endif
  protocol__add_content('pre')
  gsl from my.node.post
  return my.cached
endfunction

function post_close(cached)
  cache__close(my.cached)
endfunction

function preload_nodes(ctx, projecttree, ctx_logname)
  my.ctx_logname ?= ""
  
  for my.ctx.node as n
    for my.projecttree. as projectnode where n.name=name()
      debug('preload node "$(n.name:)"', my.ctx_logname)
      if defined(n.pre)
        if !file.exists(n.pre)
          error('The filename $(n.pre:) does not exist.')
        endif
        pre_open(n, projectnode)
      endif
      preload_nodes(n, projectnode, my.ctx_logname + n.name + "][")
    endfor
  endfor
endfunction

function postload_nodes(ctx, projecttree, ctx_logname)
  my.ctx_logname ?= ""
  
  for my.ctx.node as n
    for my.projecttree. as projectnode where n.name=name()
      debug('postload node "$(n.name:)"', my.ctx_logname)
      if defined(n.post)
        if !file.exists(n.post)
          error('The filename $(n.post:) does not exist.')
        endif
        my.cached = post_open(n, projectnode)
      endif
      postload_nodes(n, projectnode, my.ctx_logname + n.name + "][")
      if defined(n.post_end)
        gsl from n.post_end
      endif
      protocol__add_content('post')
      if defined(my.cached) & my.cached <> 0
        post_close(my.cached)
      endif
    endfor
  endfor
endfunction

function global.protocol__preload(ctx, projecttree, ctx_logname)
  my.ctx_logname ?= ""
  my.projecttree ?= root

  preload_nodes(my.ctx, my.projecttree, my.ctx_logname)
endfunction

function global.protocol__postload(ctx, projecttree, ctx_logname)
  my.ctx_logname ?= ""
  my.projecttree ?= root

  postload_nodes(my.ctx, my.projecttree, my.ctx_logname)
endfunction

.endtemplate